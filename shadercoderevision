// Author: Prince Polka
// Title: BezierTime revision

#ifdef GL_ES
precision highp float;
#endif

uniform vec2 u_resolution;
uniform vec2 u_mouse;
uniform float u_time;

const float
U = 1.5874010519681994747517056392723,
TWO_PI = 6.283185307179586476925286766559;
const vec3 rots = vec3(
    -1.5707963267948966192313216916397,
    0.5235987755982988730771072305465,
    0.5235987755982988730771072305465
);

vec4 new_bezier(vec4 inp){
/*
This could be done on cpu and passed as uniforms for static beziers
*/
float 
A = inp.x,
B = inp.y,
C = inp.z,
D = inp.w;

float
H = 3.*(C-B) + A-D;
    
return vec4(
3.*(C-B) + A-D,
(B-C-C)*(B*(B+B+C)-C*(C+A*3.))+D*(A*(A+D-3.*(B+C))+B*(6.*B-3.*C)),
 9. * ( A*(C-D) + B*(C-B+D) - C*C ),
( A + C - B - B )/H
);
}

vec3 bezierTime(float E , vec4 bez) {
    float F = 27.*(bez.y-(bez.x*bez.x*E));
    float FG = F*F+4.*bez.z*bez.z*bez.z;
    float s, r, n;
    s = sqrt(abs(FG));
    float ispos = float(FG>=0.)*s;
    float isneg = float(FG<0.)*s;
    r = abs(F+ispos)+isneg;
    r = sign(r)*pow(abs(r),1./3.);
    n = (atan(isneg,F+ispos)+TWO_PI )/3.;
    float  multr = (4.*bez.z - r*r *U*U)/(6.*bez.x*r*U);
    vec3 t,c;
    t = sin( rots+vec3(-n,n,-n)) * multr + bez.w;
    c = mod(clamp(t,0.0,1.0),1.0);
    // c.rg *= float( abs(t.r-t.g)>.001 );
    // c.rb *= float( abs(t.r-t.b)>.001 );
    // c.gb *= float( abs(t.g-t.b)>.001 );
    return c;
}

vec3 times2coords(vec3 t ,vec4 b){
    vec3 t1 = 1. - t;
    vec3 ret = (b.x*t1 + 3.*b.y*t)*t1*t1 + (3.*b.z*t1 + b.w*t)*t*t;
    ret *= step(.0001,t);
    
    return ret;
}

void main() {
    vec2 st = gl_FragCoord.xy;
    vec2 res = u_resolution;
    st.y = res.y- st.y;
    vec4 bezx =        vec4(100.,202.,301.,400.);
    vec4 bezy = res.y - vec4(400.,-50.,550.,100.);
    
    vec4 bez = new_bezier(bezy);
    vec3 times = bezierTime(st.y,bez);

    vec3 coords = times2coords(times,bezx);

    float ntimes = dot( step(res.x-st.x,coords) ,vec3(1));
    vec3 color = vec3(mod(ntimes,2.0));
   
    gl_FragColor = vec4(color,1.0);
}
