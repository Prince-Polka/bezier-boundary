/*

removed complex class using raw doubles instead, merged helper functions into the main function  
probably more can be done

simplified calculation of F 

simplified calculation of solutions

added alternatives for sine and atan2

unclear how accurate they are and wheter they be faster or slower


done some testing of sin, much faster than Math.sin for me
it may be different on other systems and compilers

modulo on double by the % operator, VERY!!! slow
replacing it with a crude mod function made a huge impact

division by factorial vs multiplying by the inverse,
speed difference small, accuracy also small  

*/

final static double fastmod(double a, double b){
a/=b;
a-=(int)a;
a*=b;
return a;
}
final static double 
 invfact3 = - 1 / 6D, 
 invfact5 =   1 / 120D,
 invfact7 = - 1 / 5040D,
 invfact9 =   1 / 362880D,
invfact11 = - 1 / 39916800D,
invfact13 =   1 / 6227020800D,
invfact15 = - 1 / 1307674368000D,
invfact17 =   1 / 355687428096000D,
invfact19 = - 1 / 121645100408832000D,
invfact21 =   1 / 51090942171709440000D,
invfact23 = - 1 / 25852016738884976640000D,
invfact25 =   1 / 15511210043330985984000000D,
invfact27 = - 1 / 10888869450418352160768000000D,
invfact29 =   1 / 8841761993739701954543616000000D,

PI = Math.PI,
TWO_PI = Math.PI*2,
HALF_PI = Math.PI/2,
SIXTH_PI = Math.PI/6,
CBRT2 = 1.2599210498948731647672106072782;
;

final static double fastsin(double x) {
  final double x0 = fastmod(x,TWO_PI); 
                x = fastmod(x,PI); 
  final double x2=x*x;

    x = x 
    + (x*=x2) * invfact3
    + (x*=x2) * invfact5
    + (x*=x2) * invfact7
    + (x*=x2) * invfact9
    + (x*=x2) * invfact11
    + (x*=x2) * invfact13
    + (x*=x2) * invfact15
    + (x*=x2) * invfact17
    + (x*=x2) * invfact19
    + (x*=x2) * invfact21
    + (x*=x2) * invfact23
    + (x*=x2) * invfact25
    + (x*=x2) * invfact27
    + (x*=x2) * invfact29
    ;
    
    if(Math.abs(x0)>PI){ x=-x; }
    
    return x;
}

double[] bezierTime( double A, double B, double C, double D, double E ) {
  double[] T = new double[3];
  double FAB, G, H, J, FG, x, y, n, r, multn;

  H =  3 * (C-B) + A-D;

  FAB = (B-C-C) * ( B * (B+B+C) - C * (A*3+C) )
    + D * ( A * ( A+D - 3*(B+C) ) + B * (6*B-3*C) );
  x = 27*(FAB-H*H*E); /* <- E isolated
   if the curve ABCD is static and you're testing several points E against it
   then H, FAB, G, J are static and caching them may be faster?  
   the x,n and r depends on the value of E though
   be aware the name of the variables and the logic of the code may change
   */

  G =  9 * ( A*(C-D) + B*(D+C-B) - C*C );

  J = ( A + C - B - B ) / H;
  
  FG = x*x+4*G*G*G;

  double aX = Math.abs(x);
  y = Math.sqrt(Math.abs(FG));
  if (FG>=0) {
    /* this case does not need to calculate neither atan2 or sin */
    n = Math.cbrt(Math.abs(x+y));
    multn = CBRT2*(G+G-CBRT2*n*n)/(6*H*n);
    if (x+y>=0) {
      T[0] = 0.5*multn + J;
      T[1] = T[0];
      T[2] = -multn + J;
    } else {
      T[0] = multn + J;
      T[1] = -0.5 * multn + J;
      T[2] = T[1];
    }
  } else {
    /* for now I need atan2 and sin here but hope I can remove them */
    n = Math.cbrt(aX+y);
    multn = CBRT2*(G+G-CBRT2*n*n)/(6*H*n);
    r = (Math.atan2(y, x)+TWO_PI)/3;
    /* 
     if Math.atan2 is slow try this code by
     njuffa @ https://math.stackexchange.com/a/1105038 
     double a, s;
     a=Math.min(aX, y)/Math.max(aX, y); 
     s = a*a;
     r= ((-0.0464964749 * s + 0.15931422) * s - 0.327622764) * s * a + a;
     if (y>aX)r=HALF_PI-r;
     if (x<0)r=PI-r;
     r = (r+TWO_PI)/3;
     */
    
    /*
  if Math.sin is slow try fastsin()
     */
    T[0] = fastsin( -r - HALF_PI  ) * multn + J;
    T[1] = fastsin(  r + SIXTH_PI ) * multn + J;
    T[2] = fastsin( -r + SIXTH_PI ) * multn + J;
  }
  return T;
}
