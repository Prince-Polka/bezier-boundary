import org.apache.commons.math3.complex.*;

double mult(Complex a,Complex b){
 return a.getReal()*b.getReal() - a.getImaginary()* b.getImaginary();
}

double[] bezierTime( double A, double B, double C, double D, double E ){
  double[] T = new double[3];
  double F,G,H,J,K,L;
  
  F = 27 * ( A*(A*D - A*E + D*D) - D*D*E )
   +  54 * ( A*D*E + B*B*B + C*C*C )
   -  81 * ( A*(B*C + B*D + C*D) + B*(B*C + C*C + C*D) )
   + 162 * ( A*(B*E + C*C - C*E) + D*(B*B - B*E + C*E) )
   - 243 * ( B*B*E + C*C*E)
   + 486 * ( B*C*E );
   
   G =  9 * ( A*(C-D) + B*(-B+C+D) - C*C );
   
   H = A - 3*B + 3*C - D;
   
   J = (A - 2*B + C)/H;
   
   K = 4.7622031559045984242551169178169; // 3 * pow(2,2/3)
   
   L = 1.2599210498948731647672106072782; // cbrt(2)

   Complex R = new Complex(F * F + 4*G*G*G).sqrt().add(F).nthRoot(3).get(1);
   
   Complex  plus = new Complex(1, Math.sqrt(3)); // 1 + i * sqrt(3)
   Complex minus = new Complex(1,-Math.sqrt(3)); // 1 - i * sqrt(3)
   
   double LH6 = 6 * L * H;
   double LH3 = 3 * L * H;
   
   Complex RKH = new Complex(G).divide(R.multiply(K*H));
   Complex R3H = R.multiply(3*H);
   double LGR3H = new Complex(L*G).divide(R3H).getReal();
   
   double MR,PR,MG,PG;
   MR = mult(minus,R);
   PR = mult(plus,R);
   MG = mult(minus,RKH);
   PG = mult(plus,RKH);
   
   T[0] = + R.getReal()/LH3 - LGR3H + J;
   T[1] = - MR/LH6 + PG + J;
   T[2] = - PR/LH6 + MG + J;

  return T;
}
